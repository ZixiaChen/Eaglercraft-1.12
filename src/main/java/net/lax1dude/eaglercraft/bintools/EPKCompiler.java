package net.lax1dude.eaglercraft.bintools;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.charset.StandardCharsets;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.zip.CRC32;
import java.util.zip.Deflater;
import java.util.zip.DeflaterOutputStream;

import net.lax1dude.eaglercraft.bintools.utils.GZIPOutputStream2;

/**
 * Copyright (c) 2022-2024 lax1dude. All Rights Reserved.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * 
 */
public class EPKCompiler {

	public static void _main(String[] args) throws IOException {
		if (args.length < 2 || args.length > 4) {
			System.out.println("Usage: epkcompiler <input directory> <output file> [gzip|zlib|none] [file-type]");
			return;
		}

		File root = new File(args[0]);
		File output = new File(args[1]);
		char compressionType;

		if (args.length > 2) {
			if (args[2].equalsIgnoreCase("gzip")) {
				compressionType = 'G';
			} else if (args[2].equalsIgnoreCase("zlib")) {
				compressionType = 'Z';
			} else if (args[2].equalsIgnoreCase("none")) {
				compressionType = '0';
			} else {
				throw new IllegalArgumentException("Unknown compression method: " + args[2]);
			}
		} else {
			compressionType = 'G';
		}

		System.out.println("Scanning input directory...");

		ArrayList<File> files = new ArrayList();
		listDirectory(root, files);
		ByteArrayOutputStream osb = new ByteArrayOutputStream();
		String start = root.getAbsolutePath();

		System.out.println("Compiling: " + output.getAbsolutePath());

		osb.write("EAGPKG$$".getBytes(StandardCharsets.US_ASCII));

		String chars = "ver2.0";
		osb.write(chars.length());
		osb.write(chars.getBytes(StandardCharsets.US_ASCII));

		Date d = new Date();

		String comment = "\n\n #  Eagler EPK v2.0 - Generated by EaglerBinaryTools\n" + " #  update: on "
				+ (new SimpleDateFormat("MM/dd/yyyy")).format(d) + " at "
				+ (new SimpleDateFormat("hh:mm:ss aa")).format(d) + "\n\n";

		String nm = output.getName();
		osb.write(nm.length());
		osb.write(nm.getBytes(StandardCharsets.US_ASCII));

		writeShort(comment.length(), osb);
		osb.write(comment.getBytes(StandardCharsets.US_ASCII));

		writeLong(d.getTime(), osb);
		writeInt(files.size() + 1, osb);

		osb.write(compressionType);

		OutputStream os;

		if (compressionType == 'G') {
			System.out.println("Using GZIP compression");
			os = new GZIPOutputStream2(osb, 9, 16384, true);
		} else if (compressionType == 'Z') {
			System.out.println("Using ZLIB (DEFLATE) compression");
			os = new DeflaterOutputStream(osb, new Deflater(9), 16384, true);
		} else {
			System.out.println("Using no compression");
			os = osb;
		}

		os.write("HEAD".getBytes(StandardCharsets.US_ASCII));
		String key = "file-type";
		os.write(key.length());
		os.write(key.getBytes(StandardCharsets.US_ASCII));
		String value;
		if (args.length > 3) {
			value = args[3];
		} else {
			value = "epk/resources";
		}
		writeInt(value.length(), os);
		os.write(value.getBytes(StandardCharsets.US_ASCII));
		os.write('>');

		CRC32 checkSum = new CRC32();
		for (File f : files) {
			InputStream stream = new FileInputStream(f);
			byte[] targetArray = new byte[(int) f.length()];
			stream.read(targetArray);
			stream.close();

			checkSum.reset();
			checkSum.update(targetArray, 0, targetArray.length);
			int ch = (int) checkSum.getValue();

			os.write("FILE".getBytes(StandardCharsets.US_ASCII));

			String p = f.getAbsolutePath().replace(start, "").replace('\\', '/');
			if (p.startsWith("/")) {
				p = p.substring(1);
			}
			os.write(p.length());
			os.write(p.getBytes(StandardCharsets.US_ASCII));
			writeInt(targetArray.length + 5, os);
			writeInt(ch, os);

			os.write(targetArray);
			os.write(':');
			os.write('>');
		}

		os.write("END$".getBytes(StandardCharsets.US_ASCII));
		os.close();

		osb.write(":::YEE:>".getBytes(StandardCharsets.US_ASCII));

		System.out.println("Compiled " + files.size() + " files into the EPK");
		System.out.println("Writing to disk...");

		FileOutputStream out = new FileOutputStream(output);
		out.write(osb.toByteArray());
		out.close();
	}

	public static void writeShort(int i, OutputStream os) throws IOException {
		os.write((i >> 8) & 0xFF);
		os.write(i & 0xFF);
	}

	public static void writeInt(int i, OutputStream os) throws IOException {
		os.write((i >> 24) & 0xFF);
		os.write((i >> 16) & 0xFF);
		os.write((i >> 8) & 0xFF);
		os.write(i & 0xFF);
	}

	public static void writeLong(long i, OutputStream os) throws IOException {
		os.write((int) ((i >> 56) & 0xFF));
		os.write((int) ((i >> 48) & 0xFF));
		os.write((int) ((i >> 40) & 0xFF));
		os.write((int) ((i >> 32) & 0xFF));
		os.write((int) ((i >> 24) & 0xFF));
		os.write((int) ((i >> 16) & 0xFF));
		os.write((int) ((i >> 8) & 0xFF));
		os.write((int) (i & 0xFF));
	}

	public static void listDirectory(File dir, ArrayList<File> files) {
		for (File f : dir.listFiles()) {
			if (f.isDirectory()) {
				listDirectory(f, files);
			} else {
				files.add(f);
			}
		}
	}

}